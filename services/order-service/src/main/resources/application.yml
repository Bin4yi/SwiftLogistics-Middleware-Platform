# services/order-service/src/main/resources/application.yml
server:
  port: 8081

spring:
  application:
    name: order-service

  # Database Configuration
  datasource:
    url: jdbc:h2:mem:orderdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    defer-datasource-initialization: true  # KEY FIX: Wait for JPA to create tables first
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  # SQL Initialization
  sql:
    init:
      mode: always  # Always run data.sql
      defer-datasource-initialization: true  # Wait for schema creation

  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

  # RabbitMQ Configuration (disabled for standalone testing)
  rabbitmq:
    host: localhost
    port: 5672
    username: swiftlogistics  # Make sure this matches docker-compose
    password: logistics123    # Make sure this matches docker-compose
    virtual-host: /
    connection-timeout: 15000

  # Cloud Configuration
  cloud:
    config:
      enabled: false

# Eureka Configuration (disabled for standalone testing)
eureka:
  client:
    enabled: false  # Disable Eureka for now
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: false
    register-with-eureka: false

# RabbitMQ Queue Configuration
rabbitmq:
  exchanges:
    order: order.exchange
  queues:
    order-processing: order.processing.queue
    order-status-update: order.status.update.queue

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# Logging Configuration
logging:
  level:
    com.swiftlogistics.order: INFO
    org.springframework.amqp: WARN
    org.hibernate.SQL: DEBUG
    org.springframework.jdbc: DEBUG
  pattern:
    console: "%d{HH:mm:ss} - %msg%n"

# Application Info
info:
  app:
    name: SwiftLogistics Order Service
    description: Handles order management and processing
    version: 1.0.0

---
# Docker Profile
spring:
  profiles: docker

  datasource:
    url: jdbc:postgresql://postgres:5432/swiftlogistics
    username: swift
    password: logistics123
    driver-class-name: org.postgresql.Driver

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: create

  rabbitmq:
    host: rabbitmq
    username: swiftlogistics
    password: logistics123

eureka:
  client:
    enabled: true
    service-url:
      defaultZone: http://eureka-server:8761/eureka/