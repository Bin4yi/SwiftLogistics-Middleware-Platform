server:
  port: 8083

spring:
  # Database Configuration
  datasource:
    url: jdbc:h2:mem:driverdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    defer-datasource-initialization: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  # SQL Initialization - FIXED
  sql:
    init:
      mode: always
      defer-datasource-initialization: true
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      separator: ;
      continue-on-error: false

  # H2 Console
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

  # RabbitMQ Configuration
  rabbitmq:
    host: localhost
    port: 5672
    username: swiftlogistics
    password: logistics123
    virtual-host: /
    connection-timeout: 15000

  # Redis Configuration
  redis:
    host: localhost
    port: 6379
    password:
    database: 0
    timeout: 2000ms
    jedis:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000

# Eureka Configuration
eureka:
  client:
    enabled: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    hostname: localhost

# JWT Configuration
app:
  jwt:
    secret: swiftlogistics-driver-jwt-secret-key-2024-secure
    expiration: 86400000

# RabbitMQ Queue Configuration
rabbitmq:
  exchanges:
    driver: driver.exchange
    tracking: tracking.exchange
    order: order.exchange
  queues:
    driver-assignment: driver.assignment.queue
    route-update: route.update.queue
    emergency-stop: emergency.stop.queue

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Logging Configuration
logging:
  level:
    com.swiftlogistics.driver: DEBUG
    org.springframework.amqp: WARN
    org.springframework.security: INFO
    org.springframework.cache: DEBUG
    com.netflix.eureka: INFO
    com.netflix.discovery: INFO
  pattern:
    console: "%d{HH:mm:ss} [Driver-Service] %-5level %logger{36} - %msg%n"

# Application Info
info:
  app:
    name: SwiftLogistics Driver Service
    description: Driver Management and Mobile App Backend
    version: 1.0.0

# Scheduling Configuration
driver:
  location:
    cleanup-interval: PT15M
    max-age: PT1H
  stats:
    update-interval: PT5M