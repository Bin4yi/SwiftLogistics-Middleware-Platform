server:
  port: 8082

spring:
  # Database Configuration
  datasource:
    url: jdbc:h2:mem:integrationdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  # H2 Console
  h2:
    console:
      enabled: true
      path: /h2-console

  # RabbitMQ Configuration
  rabbitmq:
    host: localhost
    port: 5672
    username: swiftlogistics
    password: logistics123
    virtual-host: /
    connection-timeout: 15000

# Eureka Configuration
eureka:
  client:
    enabled: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    hostname: localhost

# External System Configuration - THIS WAS MISSING
external-systems:
  cms:
    endpoint: http://localhost:8082/mock/cms
    timeout: 30000
    retry:
      max-attempts: 3
      delay: 1000
  ros:
    endpoint: http://localhost:8082/mock/ros
    timeout: 20000
    retry:
      max-attempts: 3
      delay: 500
  wms:
    host: localhost
    port: 9999
    timeout: 15000
    retry:
      max-attempts: 3
      delay: 1000

# RabbitMQ Queue Configuration
rabbitmq:
  exchanges:
    order: order.exchange
    integration: integration.exchange
  queues:
    order-processing: order.processing.queue
    cms-processing: cms.processing.queue
    ros-processing: ros.processing.queue
    wms-processing: wms.processing.queue
    integration-status: integration.status.queue

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Logging Configuration
logging:
  level:
    com.swiftlogistics.integration: DEBUG
    org.springframework.amqp: WARN
    org.springframework.ws: INFO
    com.netflix.eureka: INFO
    com.netflix.discovery: INFO
  pattern:
    console: "%d{HH:mm:ss} [Integration-Service] %-5level %logger{36} - %msg%n"

# Application Info
info:
  app:
    name: SwiftLogistics Integration Service
    description: Handles protocol translation and external system integration
    version: 1.0.0